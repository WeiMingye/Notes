/****************************************************************************
   作者：平衡小车之家
   产品名称：Minibalance For Arduino
****************************************************************************/

#include <PinChangeInt.h>    //外部中断
#include <MsTimer2.h>        //定时中断
#include <KalmanFilter.h>    //卡尔曼滤波
#include "I2Cdev.h"        
#include "MPU6050_6Axis_MotionApps20.h"//MPU6050库文件
#include "Wire.h"           
MPU6050 Mpu6050; //实例化一个 MPU6050 对象，对象名称为 Mpu6050
//DATASCOPE data;//实例化一个 上位机 对象，对象名称为 data
KalmanFilter KalFilter;//实例化一个卡尔曼滤波器对象，对象名称为 KalFilter
//Servo My_Servo;       //创建对象   
int16_t ax, ay, az, gx, gy, gz;
char counter = 0;  //MPU6050的三轴加速度和三轴陀螺仪数据
float Distance,Pre_Distance,Max_Distance,Max_Pos,Temp_Distance;
char Measure_Flag = 0,Turn_Flag = 0,Scan_Flag = 0,Measure_Enable,Back_Flag,Auto_Mode,Corner_Flag,Stuck_Flag;
char value=4;

#define ECHO A1      //echo
#define TRIG A2     //trig
#define SERVOPIN 11  //舵机红色电源线，棕色地线，橘色信号线
#define KEY 3     //按键引脚
#define IN1 12   //TB6612FNG驱动模块控制信号 共6个
#define IN2 13
#define IN3 7
#define IN4 6
#define PWMA 10
#define PWMB 9
#define ENCODER_L 2  //编码器采集引脚 每路2个 共4个

#define DIRECTION_L 5
#define ENCODER_R 4
#define DIRECTION_R 8
#define ZHONGZHI -2   //小车的机械中值
#define t0 50         //扫描延时的时间
#define t1 30         //回转延时的时间
int Balance_Pwm, Velocity_Pwm, Turn_Pwm;   //直立 速度 转向环的PWM
int Motor1, Motor2;      //电机叠加之后的PWM
float Battery_Voltage;   //电池电压 单位是V
volatile long Velocity_L, Velocity_R = 0;   //左右轮编码器数据
int Velocity_Left = 0, Velocity_Right = 0;      //左右轮速度
int Flag_Qian, Flag_Hou, Flag_Left, Flag_Right; //遥控相关变量
int Angle, Show_Data;  //用于显示的角度和临时变量
unsigned char Flag_Stop = 1,Send_Count;  //停止标志位和上位机相关变量，Flag_Stop = 1时，停止运行
//***************下面是卡尔曼滤波相关变量***************//
float K1 = 0.05; // 对加速度计取值的权重
float Q_angle = 0.001, Q_gyro = 0.005;
float R_angle = 0.5 , C_0 = 1;
float dt = 0.005; //注意：dt的取值为滤波器采样时间 5ms

void READ_ENCODER_L();    //外部中断读取左编码器数据
void READ_ENCODER_R();    //外部中断读取右编码器数据
void Measure();           //带距离值输出的测量函数（1s输出一次距离和速度值）
void Measure_No_Print();  //不带距离值输出的测量函数
void Servo_Scan();        //舵机扫描函数
void RemoteControl();     //远程控制函数
void Servo_Pulse(int angle);  //舵机转角控制函数
/**************************************************************************
函数功能：异常关闭电机 作者：平衡小车之家
入口参数：倾角和电池电压
返回  值：1：异常  0：正常
**************************************************************************/
unsigned char Turn_Off(float angle, float voltage)
{
  unsigned char temp;
  if (angle < -40 || angle > 40 || 1 == Flag_Stop || voltage < 11.1)
  {  //电池电压低于11.1V关闭电机 //===倾角大于40度关闭电机//===Flag_Stop置1关闭电机      
    Flag_Stop=1;                                                                  
    temp = 1;                                          
    analogWrite(PWMA, 0);  //PWM输出为0
    analogWrite(PWMB, 0); //PWM输出为0
  }
  else    temp = 0;   //不存在异常，返回0
  return temp;
}
/**************************************************************************
函数功能：虚拟示波器往上位机发送数据 作者：平衡小车之家
入口参数：无
返回  值：无
**************************************************************************/
/*void DataScope(void)
{
  int i;
  data.DataScope_Get_Channel_Data(Angle, 1);  //显示第一个数据，角度
  data.DataScope_Get_Channel_Data(Velocity_Left, 2);//显示第二个数据，左轮速度  也就是每40ms输出的脉冲计数
  data.DataScope_Get_Channel_Data(Velocity_Right, 3);//显示第三个数据，右轮速度 也就是每40ms输出的脉冲计数
  data.DataScope_Get_Channel_Data(Battery_Voltage, 4);//显示第四个数据，电池电压，单位V
  Send_Count = data.DataScope_Data_Generate(4); 
  for ( i = 0 ; i < Send_Count; i++)
  {
    Serial.write(DataScope_OutPut_Buffer[i]);  
  }
  delay(50);  //上位机必须严格控制发送时序
}
*/

/**************************************************************************
函数功能：按键扫描  作者：平衡小车之家
入口参数：无
返回  值：按键状态，1：单击事件，0：无事件。
**************************************************************************/
unsigned char My_click(void){
  static unsigned char flag_key = 1; //按键按松开标志
  unsigned char Key;   
  Key = digitalRead(KEY);   //读取按键状态
  if (flag_key && Key == 0) //如果发生单击事件
  {
    flag_key = 0;
    return 1;            // 单击事件
  }
  else if (1 == Key)     
    flag_key = 1;
  return 0;//无按键按下
}
/**************************************************************************
函数功能：直立PD控制  作者：平衡小车之家
入口参数：角度、角速度
返回  值：直立控制PWM
**************************************************************************/
int balance(float Angle, float Gyro)
{
  float Bias, kp = 20, kd = 0.5;
  int balance;
  Bias = Angle - ZHONGZHI;   //===求出平衡的角度中值 和机械相关
  balance = kp * Bias + Gyro * kd; //===计算平衡控制的电机PWM  PD控制   kp是P系数 kd是D系数
  return balance;
}
/**************************************************************************
函数功能：速度PI控制 作者：平衡小车之家
入口参数：左轮编码器、右轮编码器
返回  值：速度控制PWM
**************************************************************************/
int velocity(int encoder_left, int encoder_right)
{
  static float Velocity, Encoder_Least, Encoder, Movement;
  static float Encoder_Integral, Target_Velocity;
  float kp = 2, ki = kp / 200;    //PI参数
  static char Back_Count;
  //后退一秒（速度环控制周期为40ms，累计25次后为一秒）
  if(Back_Flag)
  {
    Flag_Hou=1;
    if(++Back_Count>=25)
    {
      Back_Flag=0;
      Flag_Hou=0;
      Back_Count=0;
      Scan_Flag=1;      //后退完成后，将扫描标志置1
    }
  }
  if       ( Flag_Hou == 1)Movement = 600;
  else   if ( Flag_Qian == 1)Movement = -600;
  else    //这里是停止的时候反转，让小车尽快停下来
  {
    Movement = 0;
    if (Encoder_Integral > 300)   Encoder_Integral -= 250;
    if (Encoder_Integral < -300)  Encoder_Integral += 250;
  }
  //=============速度PI控制器=======================//
  Encoder_Least = (encoder_left + encoder_right) - 0;               //===获取最新速度偏差==测量速度（左右编码器之和）-目标速度（此处为零）
  Encoder *= 0.7;                                                   //===一阶低通滤波器
  Encoder += Encoder_Least * 0.3;                                   //===一阶低通滤波器
  Encoder_Integral += Encoder;                                      //===积分出位移 积分时间：40ms
  Encoder_Integral = Encoder_Integral - Movement;                   //===接收遥控器数据，控制前进后退
  if (Encoder_Integral > 21000)    Encoder_Integral = 21000;        //===积分限幅
  if (Encoder_Integral < -21000) Encoder_Integral = -21000;         //===积分限幅
  Velocity = Encoder * kp + Encoder_Integral * ki;                  //===速度控制
  if (Turn_Off(KalFilter.angle, Battery_Voltage) == 1 || Flag_Stop == 1)    Encoder_Integral = 0;//小车停止的时候积分清零
  return Velocity;
}
/**************************************************************************
函数功能：转向控制 作者：平衡小车之家
入口参数：Z轴陀螺仪
返回  值：转向控制PWM
**************************************************************************/
int turn(float gyro)//转向控制
{
  static  unsigned char Turn_Count=0;   //用于控制转向时间（转向周期为20ms）
  static float Turn_Target, Turn, Turn_Convert = 2;
  /*float Turn_Amplitude = 80, Kp = 2, Kd = 0.001;  //PD参数*/
  float Turn_Amplitude = 40, Kp = 2, Kd = 0.001;  //PD参数
  
  //不在墙角，且转向标志置1时，不同角度转过的时间不同
  if(Turn_Flag && !Corner_Flag)   
  {
     if(Max_Pos>=90)   
        Flag_Left=1;
     else 
        Flag_Right=1;
      Turn_Count++;
      if(abs(Max_Pos-90)<=20) 
      {        
        if(Turn_Count > abs(10*(Max_Pos-90)/10))
        {
          Turn_Flag=0;
          Turn_Count=0;
          Flag_Right=0;  
          Flag_Left=0;       
        }        
      }
      else if(abs(Max_Pos-90)<=40) 
          {
            if(Turn_Count > abs(8*(Max_Pos-90)/10))
            {
              Turn_Flag=0;
              Turn_Count=0;
              Flag_Right=0;  
              Flag_Left=0;       
            }
          }
          else
          {
            if(Turn_Count > abs(6*(Max_Pos-90)/10))
            {
              Turn_Flag=0;
              Turn_Count=0;
              Flag_Right=0;  
              Flag_Left=0;       
            }
          }
    }
    //在墙角时，180度转身回头
    if(Corner_Flag)
    {
      Turn_Count++;
      Flag_Right=1;
      if(Turn_Count > 100)
      {
        Turn_Flag=0;
        Turn_Count=0;
        Flag_Right=0;  
        Flag_Left=0;   
        Corner_Flag=0;    
      }
    }
    
  if (1 == Flag_Right)       Turn_Target -= Turn_Convert;//根据遥控指令改变转向偏差
  else if (1 == Flag_Left)   Turn_Target += Turn_Convert;  //根据遥控指令改变转向偏差
  else Turn_Target = 0;
  if (Turn_Target > Turn_Amplitude)  Turn_Target = Turn_Amplitude; //===转向速度限幅
  if (Turn_Target < -Turn_Amplitude) Turn_Target = -Turn_Amplitude;
  Turn = -Turn_Target * Kp + gyro * Kd;         //===结合Z轴陀螺仪进行PD控制
  return Turn;
}
/**************************************************************************
函数功能：赋值给PWM寄存器 作者：平衡小车之家
入口参数：左轮PWM、右轮PWM
返回  值：无
**************************************************************************/
void Set_Pwm(int moto1, int moto2)
{
  if (moto1 > 0)     digitalWrite(IN1, HIGH),      digitalWrite(IN2, LOW);  //TB6612的电平控制
  else             digitalWrite(IN1, LOW),       digitalWrite(IN2, HIGH); //TB6612的电平控制
  analogWrite(PWMA, abs(moto1)); //赋值给PWM寄存器
  if (moto2 < 0) digitalWrite(IN3, HIGH),     digitalWrite(IN4, LOW); //TB6612的电平控制
  else        digitalWrite(IN3, LOW),      digitalWrite(IN4, HIGH); //TB6612的电平控制
  analogWrite(PWMB, abs(moto2));//赋值给PWM寄存器
}
/**************************************************************************
函数功能：限制PWM赋值  作者：平衡小车之家
入口参数：无
返回  值：无
**************************************************************************/
void Xianfu_Pwm(void)
{
  int Amplitude = 200;  //===PWM满幅是255 限制在250
  if (Motor1 < -Amplitude) Motor1 = -Amplitude;
  if (Motor1 > Amplitude)  Motor1 = Amplitude;
  if (Motor2 < -Amplitude) Motor2 = -Amplitude;
  if (Motor2 > Amplitude)  Motor2 = Amplitude;
}
/**************************************************************************
函数功能：5ms控制函数 核心代码 作者：平衡小车之家
入口参数：无
返回  值：无
**************************************************************************/
void control()
{
  static int Velocity_Count, Turn_Count, Encoder_Count;
  static float Voltage_All,Voltage_Count;
  static char Int_count;  //用于统计进入中断的次数
  int Temp;
  if(++Int_count>=8)  //中断达到8次（40ms），则将测量标志置1，等待进行一次距离测量
  {
    Int_count=0;
    Measure_Enable=1;
  }
  sei();                //开启全局中断（关闭全局中断为 cli）
  Mpu6050.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);  //获取MPU6050陀螺仪和加速度计的数据
  KalFilter.Angletest(ax, ay, az, gx, gy, gz, dt, Q_angle, Q_gyro, R_angle, C_0, K1);          //通过卡尔曼滤波获取角度
  Angle = KalFilter.angle;//Angle是一个用于显示的整形变量
  Balance_Pwm = balance(KalFilter.angle, KalFilter.Gyro_x);//直立PD控制 控制周期5ms
  
  RemoteControl();

  if (++Velocity_Count >= value*2) //速度控制，控制周期40ms
  {
    Velocity_Left = Velocity_L;    Velocity_L = 0;  //读取左轮编码器数据，并清零，这就是通过M法测速（单位时间内的脉冲数）得到速度。
    Velocity_Right = Velocity_R;    Velocity_R = 0; //读取右轮编码器数据，并清零
    Velocity_Pwm = velocity(Velocity_Left, Velocity_Right);//速度PI控制，控制周期40ms
    Velocity_Count = 0;
  }
  if (++Turn_Count >= value)//转向控制，控制周期20ms
  { 
    if(++counter <= 30 )
        Turn_Pwm = turn(gz);
  Turn_Count = 0;
  }
  
  Motor1 = Balance_Pwm - Velocity_Pwm + Turn_Pwm;  //直立速度转向环的叠加
  Motor2 = Balance_Pwm - Velocity_Pwm - Turn_Pwm;  //直立速度转向环的叠加
  Xianfu_Pwm();//限幅

  if (Turn_Off(KalFilter.angle, Battery_Voltage) == 0)        
  Set_Pwm(Motor1, Motor2);//如果不存在异常，赋值给PWM寄存器控制电机
  
  if (My_click()) Flag_Stop = !Flag_Stop;   //中断剩余的时间扫描一下按键状态
  Temp = analogRead(0);  //采集一下电池电压
  
  Voltage_Count++;       //平均值计数器
  Voltage_All+=Temp;     //多次采样累积
  if(Voltage_Count==200) 
  Battery_Voltage=Voltage_All*0.05371/200,Voltage_All=0,Voltage_Count=0;//求平均值
}
/**************************************************************************
函数功能：初始化 相当于STM32里面的Main函数 作者：平衡小车之家
入口参数：无
返回  值：无
**************************************************************************/
void setup() {
  pinMode(ECHO,INPUT);
  pinMode(TRIG,OUTPUT);
  pinMode(SERVOPIN,OUTPUT);      
  pinMode(IN1, OUTPUT);         //TB6612控制引脚，控制电机1的方向，01为正转，10为反转
  pinMode(IN2, OUTPUT);          //TB6612控制引脚，
  pinMode(IN3, OUTPUT);          //TB6612控制引脚，控制电机2的方向，01为正转，10为反转
  pinMode(IN4, OUTPUT);          //TB6612控制引脚，
  pinMode(PWMA, OUTPUT);         //TB6612控制引脚，电机PWM
  pinMode(PWMB, OUTPUT);         //TB6612控制引脚，电机PWM
  digitalWrite(IN1, 0);          //TB6612控制引脚拉低
  digitalWrite(IN2, 0);          //TB6612控制引脚拉低
  digitalWrite(IN3, 0);          //TB6612控制引脚拉低
  digitalWrite(IN4, 0);          //TB6612控制引脚拉低
  analogWrite(PWMA, 0);          //TB6612控制引脚拉低
  analogWrite(PWMB, 0);          //TB6612控制引脚拉低
  pinMode(2, INPUT);       //编码器引脚
  pinMode(4, INPUT);       //编码器引脚
  pinMode(5, INPUT);       //编码器引脚
  pinMode(8, INPUT);       //编码器引脚
  pinMode(3, INPUT);       //按键引脚
  Wire.begin();             //加入 IIC 总线
  Serial.begin(9600);       //开启串口，设置波特率为 9600
  delay(1500);              //延时等待初始化完成
  Mpu6050.initialize();     //初始化MPU6050
  delay(20); 
  MsTimer2::set(5, control);  //使用Timer2设置5ms定时中断
  MsTimer2::start();          //使用中断使能
  attachInterrupt(0, READ_ENCODER_L, CHANGE);           //开启外部中断 编码器接口1
  attachPinChangeInterrupt(4, READ_ENCODER_R, CHANGE);  //开启外部中断 编码器接口2
  Servo_Pulse(90);
}
/**************************************************************************
函数功能：获取遥控控制信号
入口参数：无
返回  值：无
**************************************************************************/
void RemoteControl()
{
  if (Serial.available())
  {
    switch (Serial.read())
    {
        case 'q': Flag_Qian = 1; Flag_Hou = 0; Flag_Left = 0; Flag_Right = 0; break;
        case 'h': Flag_Qian = 0; Flag_Hou = 1; Flag_Left = 0; Flag_Right = 0; break;
        case 'l': Flag_Qian = 0; Flag_Hou = 0; Flag_Left = 1; Flag_Right = 0; break;
        case 'r': Flag_Qian = 0; Flag_Hou = 0; Flag_Left = 0; Flag_Right = 1; break;
        case 'p': counter = 0; Flag_Left = 0; Flag_Right = 0; break;
        case 'w': Flag_Stop = !Flag_Stop; break;
        
        case'a': Auto_Mode = !Auto_Mode; break;
        case'b': Back_Flag=1; break;
        case'm': Measure_Flag = !Measure_Flag; break;      
        case's': Scan_Flag = 1; break;
        default : Flag_Qian = 0; Flag_Hou = 0; Flag_Left = 0; Flag_Right = 0; break;
    }
  }
}

/**************************************************************************
函数功能：外部中断读取编码器数据，具有二倍频功能 注意外部中断是跳变沿触发
入口参数：无
返回  值：无
**************************************************************************/
void READ_ENCODER_L() {
  if (digitalRead(ENCODER_L) == LOW) {     //如果是下降沿触发的中断
    if (digitalRead(DIRECTION_L) == LOW)      
    Velocity_L--;  //根据另外一相电平判定方向
    else      
    Velocity_L++;
  }
  else {     //如果是上升沿触发的中断
    if (digitalRead(DIRECTION_L) == LOW)      
    Velocity_L++; //根据另外一相电平判定方向
    else     
    Velocity_L--;
  }
}
/**************************************************************************
函数功能：外部中断读取编码器数据，具有二倍频功能 注意外部中断是跳变沿触发
入口参数：无
返回  值：无
**************************************************************************/
void READ_ENCODER_R() {
  if (digitalRead(ENCODER_R) == LOW) { //如果是下降沿触发的中断
    if (digitalRead(DIRECTION_R) == LOW)      
    Velocity_R--;//根据另外一相电平判定方向
    else      
    Velocity_R++;
  }
  else {   //如果是上升沿触发的中断
    if (digitalRead(DIRECTION_R) == LOW)      
    Velocity_R++; //根据另外一相电平判定方向
    else     
    Velocity_R--;
  }
}
/**************************************************************************
函数功能：主循环程序体
入口参数：无
返回  值：无
**************************************************************************/
void loop() {
  int Voltage_Temp;
  float Stop_Threshold;
  unsigned char Stuck_Count;
  unsigned char Measure_Count;
  Voltage_Temp = (Battery_Voltage - 11.1) * 60;  //根据APP的协议对电池电压变量进行处理
  if (Voltage_Temp > 100)Voltage_Temp = 100;
  if (Voltage_Temp < 0)Voltage_Temp = 0;

  RemoteControl();
   
  if(!Flag_Stop)  //非停止状态时
  {
    if(Auto_Mode) //自动模式下
    {
      if(Scan_Flag) //扫描
      {
         Scan_Flag=0; //等待小车稳定
         delay(2000);
         Servo_Scan();  //扫描
         delay(1000);
         Turn_Flag=1;   //转向
         delay(2000);   //等待小车稳定
      }
      if(!Back_Flag && !Scan_Flag)  //自动模式下，非后退和非扫描时，默认为前进
      Flag_Qian=1;
    }
    //
     if(Measure_Enable)   //40ms扫描一次
     {
        Measure_Enable=0;
        if(Measure_Flag)    //根据标志确定是否输出距离值和速度值
        Measure();  
        else Measure_No_Print(); 

        if((abs(Velocity_Left)<50) || abs(Velocity_Right)<50)   //根据速度调整刹车距离
            Stop_Threshold = 20.0;
        else Stop_Threshold = 30.0;
            
        if((Flag_Qian == 1) && (Distance<Stop_Threshold))   //前进过程中，当前距离小于刹车距离，则制动
        {
          Flag_Qian = 0; 
          delay(2000);      //等待刹车完成
          if(Auto_Mode)     //自动模式下，自动后退一秒（在中断时统计1s时间）            
            Back_Flag=1;
        }
        if(++Measure_Count>25)  //1s时间到
        {
          Measure_Count=0;
          //若前进过程，左右两轮速度皆小于2和时间超过3s，则认为小车被卡住
          if((Flag_Qian == 1) && abs(Velocity_Left)<2 && abs(Velocity_Right)<2) 
          {
            Stuck_Count++;
            if(Stuck_Count>=3)  //3s时间到
            {
              Stuck_Count=0;
              Back_Flag=1;      //后退1s
            }
          }
          else 
            Stuck_Count=0;      //条件不符，重新统计次数
        }
     }
  } 
}

//带距离值输出的测量函数（1s输出一次距离和速度值）
void Measure()
{
  static unsigned char count=0; //静态变量用于统计函数调用次数
 // if(!Scan_Flag)   
 // count++;
 //以下为超声波模块的使用时序
  digitalWrite(TRIG,LOW);
  delayMicroseconds(5);
  digitalWrite(TRIG,HIGH);
  delayMicroseconds(15);
  digitalWrite(TRIG,LOW);

  Temp_Distance=pulseIn(ECHO,HIGH);

  if((Temp_Distance/58.0)<450)  //超声波模块的有效测量距离不大于450cm
  {
    Pre_Distance=Distance;    //先将先前的值保留下来，便于后续的距离比较
    Distance=Temp_Distance/58.0;
  }

  if(++count>=25)   //1s输出一次距离值和速度值
  {
    count=0;
    Serial.print("distance is ");
    Serial.print(Distance);
    Serial.println("cm");
    Serial.print("Velocity_Left is ");
    Serial.println(Velocity_Left);
    Serial.print("Velocity_Right is ");
    Serial.println(Velocity_Right);     
  }
}
//不带距离值输出的测量函数
void Measure_No_Print()
{
  //以下为超声波模块的使用时序
  digitalWrite(TRIG,LOW);
  delayMicroseconds(5);
  digitalWrite(TRIG,HIGH);
  delayMicroseconds(15);
  digitalWrite(TRIG,LOW);

  Temp_Distance=pulseIn(ECHO,HIGH);

  if((Temp_Distance/58.0)<450)  //超声波模块的有效测量距离不大于450cm
  {
   Pre_Distance=Distance;       //先将先前的值保留下来，便于后续的距离比较
   Distance=Temp_Distance/58.0;
  }
}

//本来Arduino有舵机控制的库，但小车的已使用了timer1，PWMA、PWMB的实现实际利用了timer1，
//调用舵机库会使PWM无法实现，转而只用采用原始方法，用timer0的delay作延时来实现舵机角度控制
//在舵机转角时，会短暂关闭timer2的中断，避免对舵机20ms控制周期的影响

//舵机转角控制函数
void Servo_Pulse(int angle)
{
  //舵机的转角控制周期为20ms，不同的占空比有不同的角度
  int Pulse_Width=(angle*11)+500;
  digitalWrite(SERVOPIN,HIGH);
  delayMicroseconds(Pulse_Width);
  digitalWrite(SERVOPIN,LOW);
  delayMicroseconds(20000-Pulse_Width);
}
//舵机扫描函数
void Servo_Scan()
{
  unsigned char Pos,Temp_Pos; 
  static char Corner_Count;   //静态变量
   Max_Distance=0;            //赋初值
   MsTimer2::stop();          //使用中断使能
   Servo_Pulse(90);           //舵机的初始角度为90
   MsTimer2::start();          //使用中断使能
  for(Temp_Pos=90;Temp_Pos<=160;Temp_Pos+=2)    
  {
    MsTimer2::stop();          //使用中断使能
    Servo_Pulse(Temp_Pos);
    MsTimer2::start();          //使用中断使能
    if(Temp_Pos%10==0)          //每转过十度采集一次距离
    {   
       Measure();
       Serial.print("the angle is");   //串口输出角度和距离
       Serial.println(Temp_Pos);
       Serial.print("distance is ");
       Serial.print(Distance);
       Serial.println("cm");
       if(Distance>Max_Distance)      //更新最大距离和对应的角度
       {
          Max_Distance=Distance;
          Max_Pos=Temp_Pos;
       }
    }
      delay(t0);
  }  
  for(Temp_Pos=160;Temp_Pos>=20;Temp_Pos-=2)   //回转
  {
    MsTimer2::stop();          //使用中断使能
    Servo_Pulse(Temp_Pos);
    MsTimer2::start();          //使用中断使能
    delay(t1);
  }
  for(Temp_Pos=20;Temp_Pos<=90;Temp_Pos+=2)       
  {
    MsTimer2::stop();          //使用中断使能
    Servo_Pulse(Temp_Pos);
    MsTimer2::start();          //使用中断使能
    if(Temp_Pos%10==0)                 //每转过十度采集一次距离
    {   
       Measure();
       Serial.print("the angle is");    //串口输出角度和距离
       Serial.println(Temp_Pos);
       Serial.print("distance is ");
       Serial.print(Distance);
       Serial.println("cm");
       if(Distance>Max_Distance)         //更新最大距离和对应的角度
       {
          Max_Distance=Distance;
          Max_Pos=Temp_Pos;
       }
    } 
    delay(t0);
  } 
  Serial.print("the angle is");         //输出最大距离和对应的角度
  Serial.println(Max_Pos);
  Serial.print("the max distance is");
  Serial.print(Max_Distance);
  Serial.println("cm");
  if(abs(Max_Pos-90)<=20)   //统计扫描的最大距离对应的角度小于等于20的次数
  {
    Corner_Count++;
    if(Corner_Count>=3)     //若大于等于3次，则认为小车在角落
    {
      Corner_Count=0;
      Corner_Flag=1;
      Serial.println("I am in the conrner!");
    }
  }
  else Corner_Count=0;
}
